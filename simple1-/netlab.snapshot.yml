addressing:
  l2only: {}
  lan:
    ipv4: 172.16.0.0/16
    prefix: 24
  loopback:
    ipv4: 10.0.0.0/24
    prefix: 32
  mgmt:
    ipv4: 192.168.121.0/24
    mac: 08-4F-A9-00-00-00
    prefix: 24
    start: 100
  p2p:
    ipv4: 10.1.0.0/16
    prefix: 30
  router_id:
    ipv4: 10.0.0.0/24
    prefix: 32
  vrf_loopback:
    ipv4: 10.2.0.0/24
    prefix: 32
defaults:
  _globals:
    _modlist:
    - vlan
    - evpn
    - srv6
    - ospf
    - bgp
    - isis
    - bfd
    - vrf
    - vxlan
    - eigrp
    - sr
    - mpls
    - gateway
    node_id_id:
      max: 250
      next: 5
      value: !!set
        1: null
        2: null
        3: null
        4: null
        5: null
  addressing:
    l2only: null
    lan:
      ipv4: 172.16.0.0/16
    loopback:
      ipv4: 10.0.0.0/24
    mgmt:
      ipv4: 192.168.121.0/24
      mac: 08-4F-A9-00-00-00
      start: 100
    p2p:
      ipv4: 10.1.0.0/16
    router_id:
      ipv4: 10.0.0.0/24
      prefix: 32
    vrf_loopback:
      ipv4: 10.2.0.0/24
      prefix: 32
  attributes:
    can_be_false:
    - link
    - interface
    extra:
      global:
        vlans: vlan
        vrfs: vrf
      node:
        vlans: vlan
        vrfs: vrf
    global:
      addressing: null
      defaults: null
      groups: null
      links: null
      module: null
      name: str
      nodes: null
      plugin: list
      provider: str
    group:
      config: list
      device: str
      members: list
      module: list
      node_data: dict
      vars: dict
    interface:
      ifindex: int
      ipv4:
        type: ipv4
        use: interface
      ipv6:
        type: ipv6
        use: interface
      node: str
    internal:
    - input
    - includes
    - pools
    - Provider
    - Plugin
    - message
    link:
      bandwidth: int
      bridge: str
      interfaces: null
      mtu:
        max_value: 65535
        min_value: 64
        type: int
      name: str
      pool: str
      prefix: null
      role: str
      type:
        type: str
        valid_values:
        - lan
        - p2p
        - stub
        - loopback
        - vlan_member
      unnumbered: bool
      vlan_name: str
    link_internal:
    - linkindex
    - parentindex
    link_module_no_propagate:
    - vlan
    link_no_propagate:
    - prefix
    - interfaces
    - gateway
    node:
      box: str
      config: list
      cpu: null
      device: str
      group: list
      id:
        max_value: 150
        min_value: 1
        type: int
      interfaces: list
      memory: int
      module: list
      mtu:
        max_value: 65535
        min_value: 64
        type: int
      name: str
      provider: str
      role: str
      unmanaged: bool
    pool:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      mac: mac
      prefix:
        max_value: 32
        min_value: 1
        type: int
      start:
        min_value: 1
        type: int
      unnumbered: bool
    pool_no_copy:
    - start
    - prefix
    - mac
    prefix:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
    vlan:
      id:
        max_value: 4095
        min_value: 1
        type: int
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
      prefix: null
      vni:
        max_value: 16777215
        min_value: 1
        type: int
    vrf:
      export: list
      id:
        min_value: 1
        type: int
      import: list
      loopback: null
      rd: rd
  automation:
    ansible:
      cleanup:
      - ansible.cfg
      - hosts.yml
      - group_vars
      - host_vars
      - config
  bfd:
    attributes:
      global:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      link:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      node:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
    min_echo_rx: 0
    multiplier: 3
    supported_on:
    - srlinux
    - sros
    - iosv
    - csr
    - nxos
    - eos
    - vyos
    - none
  bgp:
    advertise_loopback: true
    advertise_roles:
    - stub
    attributes:
      global:
        activate:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        advertise_loopback: bool
        advertise_roles: list
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
        as_list: dict
        community:
          _alt_types:
          - str
          - BoxList
          ebgp:
          - standard
          - extended
          ibgp:
          - standard
          - extended
        ebgp_role: str
        next_hop_self: bool
        replace_global_as: bool
        rr_cluster_id:
          type: ipv4
          use: id
        rr_list: list
        sessions:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
      interface:
        local_as: asn
        replace_global_as: bool
      link:
        advertise: bool
      node:
        activate:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        advertise_loopback: bool
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
        community:
          _alt_types:
          - str
          - BoxList
          ebgp:
          - standard
          - extended
          ibgp:
          - standard
          - extended
        local_as: asn
        next_hop_self: bool
        originate: list
        replace_global_as: bool [
        router_id:
          type: ipv4
          use: id
        rr: bool
        rr_cluster_id:
          type: ipv4
          use: id
        sessions:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
      node_copy:
      - local_as
      - replace_global_as
      vrf:
        router_id:
          type: ipv4
          use: id
    community:
      ebgp:
      - standard
      ibgp:
      - standard
      - extended
    ebgp_role: external
    next_hop_self: true
    no_propagate:
    - ebgp_role
    - advertise_roles
    - rr_list
    - as_list
    supported_on:
    - cumulus
    - cumulus_nvue
    - eos
    - frr
    - csr
    - iosv
    - nxos
    - asav
    - vsrx
    - vyos
    - routeros
    - srlinux
    - sros
    - none
    - dellos10
    - routeros7
    - vmx
    - iosxr
    - none
    transform_after:
    - vlan
  device: eos
  devices:
    asav:
      description: Cisco ASAv
      external:
        image: none
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: asa
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      ifindex_offset: 0
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        create: virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=virtio
          --name=vm_box --cpu host --arch=x86_64 --machine=pc-1.0 --vcpus=1 --ram=2048
          --os-type=linux --noacpi --virt-type=kvm --watchdog i6300esb,action=reset
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=virtio,cache=writethrough
          --disk path=bootstrap.iso,format=iso,device=cdrom --graphics none --import
        create_iso: asav
        image: cisco/asav
      mgmt_if: Management0/0
    csr:
      description: Cisco CSR 1000v
      external:
        image: none
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          model: switch
          svi_interface_name: BDI{vlan}
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: csr
      ifindex_offset: 2
      interface_name: GigabitEthernet{ifindex}
      libvirt:
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0
          --arch=x86_64 --cpu host --vcpus=1 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --network=network:vagrant-libvirt,model=virtio --graphics none --import
        image: cisco/csr1000v
      loopback_interface_name: Loopback{ifindex}
      node:
        min_mtu: 1500
      virtualbox:
        image: cisco/csr1000v
    cumulus:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:4.4.0
        mtu: 1500
        node:
          kind: cvx
          runtime: docker
      description: Cumulus VX 4.x or 5.x configured without NVUE
      evpn:
        _start_transit_vlan: 3900
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        ospf:
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: swp{ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:4.4.0
      loopback_interface_name: lo{ifindex}
      mgmt_if: eth0
      virtualbox:
        image: CumulusCommunity/cumulus-vx:4.3.0
    cumulus_nvue:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:5.0.1
        mtu: 1500
        node:
          kind: cvx
          runtime: docker
      description: Cumulus VX 5.x configured with NVUE
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          rfc8950: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        ospf:
          unnumbered: true
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus_nvue
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: cumulus
        ansible_user: cumulus
      interface_name: swp{ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:5.2.0
      mgmt_if: eth0
      virtualbox:
        image: CumulusCommunity/cumulus-vx:5.2.0
    dellos10:
      clab:
        image: vrnetlab/vr-ftosv
        interface:
          name: eth{ifindex}
        node:
          kind: vr-ftosv
      description: Dell OS10
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        vlan:
          model: switch
          svi_interface_name: virtual-network{vlan}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: dellos10
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: ethernet1/1/{ifindex}
      libvirt:
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=2048 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=sata --disk
          path=hdb_OS10-installer.qcow2,format=qcow2,bus=virtio --disk path=hdc_OS10-platform.qcow2,format=qcow2,bus=virtio
        image: dell/os10
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt1/1/1
    eos:
      clab:
        group_vars:
          ansible_become: true
          ansible_become_method: enable
          ansible_ssh_pass: admin
          ansible_user: admin
        image: ceos:4.28.1F
        interface:
          name: et{ifindex}
        mgmt_if: Management0
        node:
          env:
            INTFTYPE: et
          kind: ceos
      description: Arista vEOS
      external:
        image: none
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: eos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet{ifindex}
      libvirt:
        create_template: eos.xml.j2
        image: arista/veos
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: Management1
      virtualbox:
        image: arista/veos
    fortios:
      description: Fortinet FortiOS firewall
      external:
        image: none
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: httpapi
        ansible_httpapi_port: 80
        ansible_httpapi_use_ssl: false
        ansible_httpapi_validate_certs: false
        ansible_network_os: fortinet.fortios.fortios
        ansible_password: admin
        ansible_user: admin
        collections:
        - fortinet.fortios
        netlab_console_connection: ssh
        vdom: root
      ifindex_offset: 2
      interface_name: port{ifindex}
      libvirt:
        image: fortinet/fortios
      mgmt_if: port1
    frr:
      clab:
        image: frrouting/frr:v8.4.0
        mtu: 1500
        node:
          config_templates:
            daemons: /etc/frr/daemons
          kind: linux
      description: FRR container
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          irb: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        mpls:
          ldp: true
          vpn: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          keep_module: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: docker
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
      interface_name: eth{ifindex}
      loopback_interface_name: lo{ifindex}
      mgmt_if: eth0
    iosv:
      description: Cisco IOSv
      external:
        image: none
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BVI{bvi}
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: ios
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        create_template: iosv.xml.j2
        image: cisco/iosv
      loopback_interface_name: Loopback{ifindex}
      virtualbox:
        image: cisco/iosv
    iosxr:
      description: Cisco IOS XRv
      external:
        image: none
      features:
        bgp:
          activate_af: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        ospf:
          unnumbered: true
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: iosxr
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      ifindex_offset: 0
      interface_name: GigabitEthernet0/0/0/{ifindex}
      libvirt:
        create: virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=e1000
          --name=vm_box --cpu host --arch=x86_64 --vcpus=2 --ram=8192 --virt-type=kvm
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=ide --graphics none --import
        image: cisco/iosxr
      mgmt_if: MgmtEth0/RP0/CPU0/0
    linux:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
        image: python:3.9-alpine
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      description: Generic Linux host
      external:
        image: none
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
      interface_name: eth{ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
        image: generic/ubuntu2004
      mgmt_if: eth0
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
        image: generic/ubuntu2004
    none:
      clab:
        image: none
      description: Dummy device used to test topology transformation
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: Vlan{vlan}
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: none
      interface_name: eth{ifindex}
      libvirt:
        image: none
      loopback_interface_name: Loopback{ifindex}
      virtualbox:
        image: none
    nxos:
      bfd:
        min_rx: 500
      description: Cisco Nexus 9300v
      evpn:
        _start_transit_vlan: 3800
      external:
        image: none
      features:
        evpn:
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        ospf:
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: vlan{vlan}
      graphite:
        icon: nexus5000
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: nxos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet1/{ifindex}
      libvirt:
        create_template: nxos.xml.j2
        image: cisco/nexus9300v
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt0
      virtualbox:
        image: cisco/nexus9300v
    routeros:
      description: Mikrotik RouterOS version 6
      external:
        image: none
      features:
        mpls:
          ldp: true
          vpn: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: bridge{vlan}
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        image: mikrotik/chr
      mgmt_if: ether1
    routeros7:
      clab:
        image: vrnetlab/vr-routeros:7.6
        interface:
          name: eth{ifindex-1}
        node:
          kind: vr-ros
      description: Mikrotik RouterOS version 7
      external:
        image: none
      features:
        mpls:
          ldp: true
          vpn: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: vlan{vlan}
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: routeros7
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=256 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: mikrotik/chr7
      loopback_interface_name: loopback{ifindex}
      mgmt_if: ether1
    srlinux:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        group_vars:
          srlinux_grpc_port: 57400
        image: ghcr.io/nokia/srlinux
        interface:
          name: e1-{ifindex}
        node:
          kind: srl
          type: ixrd2
      description: Nokia SR Linux container
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        isis:
          unnumbered:
            ipv4: false
            ipv6: true
            network: false
        ospf:
          unnumbered: false
        vlan:
          mixed_trunk: true
          model: router
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb0.{vlan}
        vrf:
          keep_module: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: srlinux
        ansible_ssh_pass: NokiaSrl1!
        ansible_user: admin
        netlab_console_connection: ssh
      interface_name: ethernet-1/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: mgmt0
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    sros:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        group_vars:
          sros_grpc_port: 57400
        image: vrnetlab/vr-sros
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-sros
          license: /Projects/SR_OS_VSR-SIM_license.txt
          type: sr-1
      description: Nokia SR OS container
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: false
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: false
        mpls:
          ldp: true
        ospf:
          unnumbered: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}/1:{vlan.access_id}'
          svi_interface_name: svi.{vlan}
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: sros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_console_connection: ssh
        sros_use_openconfig: false
      interface_name: 1/1/c{ifindex}
      loopback_interface_name: loopback.{ifindex}
      mgmt_if: A/1
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    vmx:
      clab:
        image: vrnetlab/vr-vmx:18.2R1.9
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vmx
      description: Juniper vMX container
      external:
        image: none
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
      graphite:
        icon: router
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: admin@123
        ansible_user: admin
        netlab_console_connection: ssh
        netlab_device_type: vmx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vsrx:
      description: Juniper vSRX 3.0
      external:
        image: none
      features:
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          mixed_trunk: false
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vsrx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      libvirt:
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=freebsd10.0
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --disk path=bootstrap.iso,device=cdrom,bus=ide --boot hd --network=network:vagrant-libvirt,model=virtio
          --graphics none --import
        create_iso: vsrx
        image: juniper/vsrx3
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
      virtualbox:
        image: juniper/vsrx3
    vyos:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: vyos
        image: ghcr.io/sysoleg/vyos-container
        mtu: 1500
        node:
          binds:
            /lib/modules: /lib/modules
          kind: linux
      description: Vyatta VyOS VM/container
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: br0.{vlan}
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: vyos
        ansible_ssh_pass: vyos
        ansible_user: vyos
        docker_shell: su - vyos
      interface_name: eth{ifindex}
      libvirt:
        image: vyos/current
      loopback_interface_name: dum{ifindex}
      mgmt_if: eth0
  eigrp:
    as: 1
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
      link:
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
    config_after:
    - vlan
    supported_on:
    - csr
    - iosv
    - nxos
    - none
    transform_after:
    - vlan
    - vrf
  evpn:
    attributes:
      bundle:
      - vlan_aware
      - vlan
      - port
      - port_vlan
      global:
        as: asn
        session:
        - ibgp
        - ebgp
        start_transit_vni:
          max_value: 16777215
          min_value: 1
          type: int
        transport:
          type: str
          valid_values:
          - evpn
          - mpls
        vlans: list
        vrfs: list
      node:
        session:
        - ibgp
        - ebgp
        vlans: list
        vrfs: list
      vlans:
        evi: rd
        export: list
        import: list
        rd: rd
      vrf:
        bundle:
          type: str
          valid_values:
          - vlan_aware
          - vlan
          - port
          - port_vlan
        transit_vni:
          _alt_types:
          - str
          - bool
          max_value: 16777215
          min_value: 1
          type: int
    config_after:
    - vlan
    - vxlan
    - vrf
    no_propagate:
    - start_transit_vni
    - transport
    - vlan_bundle_service
    - as
    requires:
    - bgp
    session:
    - ibgp
    start_transit_vni: 200000
    supported_on:
    - sros
    - srlinux
    - frr
    - eos
    - vyos
    - dellos10
    - cumulus
    - nxos
    - none
    transform_after:
    - vlan
    - vxlan
    - vrf
  gateway:
    anycast:
      mac: 0200.cafe.00ff
      unicast: true
    attributes:
      anycast:
      - unicast
      - mac
      can_be_true:
      - link
      global:
        anycast:
          mac: mac
          unicast: bool
        id: int
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
        vrrp:
          group: int
          preempt: bool
          priority: int
      link:
        anycast:
          mac: mac
          unicast: bool
        id: int
        ipv4:
          type: ipv4
          use: interface
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
        vrrp:
          group: int
          preempt: bool
          priority: int
      link_to_neighbor: true
      node:
        anycast:
          mac: mac
          unicast: bool
        protocol: null
        vrrp:
          group: int
          preempt: bool
          priority: int
      protocols:
      - anycast
      - vrrp
      vrrp:
      - group
    config_after:
    - vlan
    - vrf
    id: -2
    no_propagate:
    - id
    - protocol
    protocol: anycast
    supported_on:
    - none
    - eos
    - cumulus
    - iosv
    - csr
    - nxos
    - sros
    - srlinux
    - vyos
    - dellos10
    transform_after:
    - vlan
    - vrf
    - ospf
    - isis
    - eigrp
    vrrp:
      group: 1
  hints:
    evpn:
      irb_group: 'All VLANs that are part of a VRF using asymmetric IRB have to be
        present on all nodes

        using that VRF. The easiest way to achieve that is to create a group with
        all

        participating nodes and list VLANs in the ''vlans'' attribute of that group

        '
      node_bundle: 'evpn.bundle attribute can be used only in global VRF definition

        '
  isis:
    area: '49.0001'
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      link:
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        cost:
          max_value: 16777215
          min_value: 1
          type: int
        metric:
          max_value: 16777215
          min_value: 1
          type: int
        network_type:
          type: str
          valid_values:
          - point-to-point
        passive: bool
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        net: net
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      node_copy: {}
    config_after:
    - vlan
    supported_on:
    - eos
    - frr
    - csr
    - iosv
    - nxos
    - asav
    - vsrx
    - srlinux
    - sros
    - vyos
    - vmx
    - iosxr
    - none
    transform_after:
    - vlan
    - vrf
    type: level-2
  module:
  - isis
  - ospf
  mpls:
    attributes:
      global:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
      link:
        ldp: bool
      node:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    ldp: true
    supported_on:
    - eos
    - iosv
    - csr
    - routeros
    - vyos
    - routeros7
    - sros
    - vmx
    - vsrx
    - frr
    - none
    transform_after:
    - vlan
    - bgp
  multilab:
    change:
      addressing:
        mgmt:
          _bridge: nl_mgmt_{id}
          _network: nl_mgmt_{id}
          ipv4: 192.168.{id}.0/24
      defaults:
        name: ml_{id}
        providers:
          libvirt:
            tunnel_id: '{id}'
            vifprefix: vif_{id}
      name: ml_{id}
  name: simple1-
  ospf:
    area: 0.0.0.0
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
      link:
        area:
          type: ipv4
          use: id
        bfd: bool
        cost:
          max_value: 65534
          min_value: 1
          type: int
        network_type:
          type: str
          valid_values:
          - point-to-point
          - point-to-multipoint
          - broadcast
          - non-broadcast
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
        router_id:
          type: ipv4
          use: id
      node_copy:
      - area
      vrf:
      - active
      - router_id
      vrf_aware:
      - area
    config_after:
    - vlan
    supported_on:
    - arcos
    - cumulus
    - cumulus_nvue
    - eos
    - fortios
    - frr
    - csr
    - iosv
    - nxos
    - vsrx
    - vyos
    - routeros
    - srlinux
    - sros
    - dellos10
    - routeros7
    - vmx
    - iosxr
    - none
    transform_after:
    - vlan
    - vrf
  outputs:
    graph:
      as_clusters: true
      colors:
        as: '#e8e8e8'
        ebgp: '#b21a1a'
        ibgp: '#613913'
        node: '#ff9f01'
        stub: '#d1bfab'
      interface_labels: false
      margins:
        as: 16
      node_address_label: true
    provider: {}
    yaml=netlab:
      snapshot:
        yml: {}
  plugin: []
  ports:
    gnmi: 57400
    http: 80
    https: 443
    netconf: 830
    ssh: 22
  provider: clab
  providers:
    clab:
      bridge_type: bridge
      cleanup:
      - clab.yml
      - clab_files
      config: clab.yml
      node_config_attributes:
      - type
      - cmd
      - env
      - ports
      probe:
      - containerlab version
      runtime: docker
      start: sudo -E containerlab deploy -t clab.yml
      stop: sudo -E containerlab destroy --cleanup -t clab.yml
      template: clab.j2
    external:
      cleanup:
      - external.txt
      config: external.txt
      probe: []
      start: echo 'Enjoy!'
      stop: echo 'What?'
      template: external.j2
    libvirt:
      clab:
        filename: clab-augment.yml
        recreate_config: true
        start: sudo -E containerlab deploy -t clab-augment.yml
        stop: sudo -E containerlab destroy --cleanup -t clab-augment.yml
      cleanup:
      - Vagrantfile
      config: Vagrantfile
      probe:
      - kvm-ok
      - virsh net-list
      - vagrant plugin list
      start: vagrant up --provider libvirt
      stop: vagrant destroy -f
      tunnel_id: 1
      vifprefix: vgif
    virtualbox:
      cleanup:
      - Vagrantfile
      config: Vagrantfile
      forwarded:
        http: 8000
        netconf: 3000
        ssh: 2000
      inventory:
        ansible_host: 127.0.0.1
      inventory_port_map:
        ssh: ansible_port
      probe:
      - VBoxManage -h
      - vagrant plugin list
      start: vagrant up --provider virtualbox
      stop: vagrant destroy -f
  sr:
    attributes:
      global:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
      node:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
    requires:
    - isis
    supported_on:
    - csr
    - eos
    - srlinux
    - sros
    - vsrx
    - vmx
    - none
    transform_after:
    - vlan
  srv6:
    address_families:
    - ipv4
    - ipv6
    attributes:
      global:
      - locator
      - address_families
      - bgp
      - isis
      node:
      - locator
      - address_families
      - bgp
      - isis
      - transit_only
    bgp: false
    isis: true
    locator: 2001:db8:aaaa
    requires:
    - isis
    supported_on:
    - sros
    - none
    transform_after:
    - vlan
  vlan:
    attributes:
      extra:
        global:
        - vlans
        node:
        - vlans
      global:
        mode:
          type: str
          valid_values:
          - bridge
          - irb
          - route
      keep_subif:
      - vlan
      - ifindex
      - ifname
      - type
      link:
        access: str
        mode:
          type: str
          valid_values:
          - bridge
          - irb
          - route
        native: str
        trunk: null
      node:
        mode: null
      phy_ifattr:
      - bridge
      - ifindex
      - parentindex
      - ifname
      - linkindex
      - type
      - vlan
      - mtu
      - _selfloop_ifindex
      vlan_no_propagate:
      - id
      - vni
      - mode
      - prefix
      - evpn
      vlan_svi_no_propagate:
      - gateway
    mode: irb
    no_propagate:
    - start_vlan_id
    - mode
    start_vlan_id: 1000
    supported_on:
    - eos
    - iosv
    - csr
    - vyos
    - dellos10
    - srlinux
    - none
    - routeros
    - nxos
    - frr
    - cumulus
    - sros
    - routeros7
    - vmx
    - vsrx
    - none
  vrf:
    as: 65000
    attributes:
      extra:
        global:
        - vrfs
        node:
        - vrfs
      global:
        as: asn
        loopback: bool
      interface: str
      link: str
      node:
        as: asn
        loopback: bool
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    - mpls
    supported_on:
    - eos
    - iosv
    - csr
    - routeros
    - dellos10
    - vyos
    - cumulus_nvue
    - nxos
    - srlinux
    - frr
    - cumulus
    - sros
    - routeros7
    - vmx
    - vsrx
    - none
    transform_after:
    - vlan
    - bgp
  vxlan:
    attributes:
      global:
        domain: str
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        use_v6_vtep: bool
        vlans: list
      node:
        domain: str
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        vlans: list
    config_after:
    - vrf
    domain: global
    flooding: static
    no_propagate:
    - use_v6_vtep
    - start_vni
    requires:
    - vlan
    start_vni: 100000
    supported_on:
    - eos
    - nxos
    - vyos
    - csr
    - dellos10
    - srlinux
    - frr
    - cumulus
    - sros
    - none
    transform_after:
    - vlan
    - vrf
    use_v6_vtep: false
includes:
- defaults
- global_defaults
input:
- topology.yml
- package:topology-defaults.yml
isis:
  area: '49.0001'
  type: level-2
links:
- interfaces:
  - ifindex: 1
    ifname: Ethernet1
    ipv4: 10.1.0.1/30
    node: A
  - ifindex: 1
    ifname: Ethernet1
    ipv4: 10.1.0.2/30
    node: B
  linkindex: 1
  node_count: 2
  prefix:
    ipv4: 10.1.0.0/30
  provider:
    clab: true
  type: p2p
- interfaces:
  - ifindex: 2
    ifname: Ethernet2
    ipv4: 10.1.0.5/30
    node: B
  - ifindex: 1
    ifname: Ethernet1
    ipv4: 10.1.0.6/30
    node: C
  linkindex: 2
  node_count: 2
  prefix:
    ipv4: 10.1.0.4/30
  provider:
    clab: true
  type: p2p
- interfaces:
  - ifindex: 3
    ifname: Ethernet3
    ipv4: 10.1.0.9/30
    node: B
  - ifindex: 1
    ifname: Ethernet1
    ipv4: 10.1.0.10/30
    node: D
  linkindex: 3
  node_count: 2
  prefix:
    ipv4: 10.1.0.8/30
  provider:
    clab: true
  type: p2p
- interfaces:
  - ifindex: 2
    ifname: Ethernet2
    ipv4: 10.1.0.13/30
    node: C
  - ifindex: 1
    ifname: Ethernet1
    ipv4: 10.1.0.14/30
    node: E
  linkindex: 4
  node_count: 2
  prefix:
    ipv4: 10.1.0.12/30
  provider:
    clab: true
  type: p2p
- interfaces:
  - ifindex: 2
    ifname: Ethernet2
    ipv4: 10.1.0.17/30
    node: D
  - ifindex: 2
    ifname: Ethernet2
    ipv4: 10.1.0.18/30
    node: E
  linkindex: 5
  node_count: 2
  prefix:
    ipv4: 10.1.0.16/30
  provider:
    clab: true
  type: p2p
module:
- isis
- ospf
name: simple1-
nodes:
  A:
    af:
      ipv4: true
    box: ceos:4.28.1F
    clab:
      env:
        INTFTYPE: et
      kind: ceos
    device: eos
    hostname: clab-simple1--A
    id: 1
    interfaces:
    - clab:
        name: et1
      ifindex: 1
      ifname: Ethernet1
      ipv4: 10.1.0.1/30
      linkindex: 1
      name: A -> B
      neighbors:
      - ifname: Ethernet1
        ipv4: 10.1.0.2/30
        node: B
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ipv4: 10.0.0.1/32
    mgmt:
      ifname: Management0
      ipv4: 192.168.121.101
      mac: 08-4F-A9-00-00-01
    module:
    - ospf
    name: A
    ospf:
      af:
        ipv4: true
      area: 0.0.0.0
      router_id: 10.0.0.1
  B:
    af:
      ipv4: true
    box: ceos:4.28.1F
    clab:
      env:
        INTFTYPE: et
      kind: ceos
    device: eos
    hostname: clab-simple1--B
    id: 2
    interfaces:
    - clab:
        name: et1
      ifindex: 1
      ifname: Ethernet1
      ipv4: 10.1.0.2/30
      linkindex: 1
      name: B -> A
      neighbors:
      - ifname: Ethernet1
        ipv4: 10.1.0.1/30
        node: A
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    - clab:
        name: et2
      ifindex: 2
      ifname: Ethernet2
      ipv4: 10.1.0.5/30
      linkindex: 2
      name: B -> C
      neighbors:
      - ifname: Ethernet1
        ipv4: 10.1.0.6/30
        node: C
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    - clab:
        name: et3
      ifindex: 3
      ifname: Ethernet3
      ipv4: 10.1.0.9/30
      linkindex: 3
      name: B -> D
      neighbors:
      - ifname: Ethernet1
        ipv4: 10.1.0.10/30
        node: D
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ipv4: 10.0.0.2/32
    mgmt:
      ifname: Management0
      ipv4: 192.168.121.102
      mac: 08-4F-A9-00-00-02
    module:
    - ospf
    name: B
    ospf:
      af:
        ipv4: true
      area: 0.0.0.0
      router_id: 10.0.0.2
  C:
    af:
      ipv4: true
    box: ceos:4.28.1F
    clab:
      env:
        INTFTYPE: et
      kind: ceos
    device: eos
    hostname: clab-simple1--C
    id: 3
    interfaces:
    - clab:
        name: et1
      ifindex: 1
      ifname: Ethernet1
      ipv4: 10.1.0.6/30
      linkindex: 2
      name: C -> B
      neighbors:
      - ifname: Ethernet2
        ipv4: 10.1.0.5/30
        node: B
      type: p2p
    - clab:
        name: et2
      ifindex: 2
      ifname: Ethernet2
      ipv4: 10.1.0.13/30
      linkindex: 4
      name: C -> E
      neighbors:
      - ifname: Ethernet1
        ipv4: 10.1.0.14/30
        node: E
      type: p2p
    loopback:
      ipv4: 10.0.0.3/32
    mgmt:
      ifname: Management0
      ipv4: 192.168.121.103
      mac: 08-4F-A9-00-00-03
    name: C
  D:
    af:
      ipv4: true
    box: ceos:4.28.1F
    clab:
      env:
        INTFTYPE: et
      kind: ceos
    device: eos
    hostname: clab-simple1--D
    id: 4
    interfaces:
    - clab:
        name: et1
      ifindex: 1
      ifname: Ethernet1
      ipv4: 10.1.0.10/30
      linkindex: 3
      name: D -> B
      neighbors:
      - ifname: Ethernet3
        ipv4: 10.1.0.9/30
        node: B
      type: p2p
    - clab:
        name: et2
      ifindex: 2
      ifname: Ethernet2
      ipv4: 10.1.0.17/30
      linkindex: 5
      name: D -> E
      neighbors:
      - ifname: Ethernet2
        ipv4: 10.1.0.18/30
        node: E
      type: p2p
    loopback:
      ipv4: 10.0.0.4/32
    mgmt:
      ifname: Management0
      ipv4: 192.168.121.104
      mac: 08-4F-A9-00-00-04
    name: D
  E:
    af:
      ipv4: true
    box: ceos:4.28.1F
    clab:
      env:
        INTFTYPE: et
      kind: ceos
    device: eos
    hostname: clab-simple1--E
    id: 5
    interfaces:
    - clab:
        name: et1
      ifindex: 1
      ifname: Ethernet1
      ipv4: 10.1.0.14/30
      isis:
        network_type: point-to-point
        passive: false
      linkindex: 4
      name: E -> C
      neighbors:
      - ifname: Ethernet2
        ipv4: 10.1.0.13/30
        node: C
      type: p2p
    - clab:
        name: et2
      ifindex: 2
      ifname: Ethernet2
      ipv4: 10.1.0.18/30
      isis:
        network_type: point-to-point
        passive: false
      linkindex: 5
      name: E -> D
      neighbors:
      - ifname: Ethernet2
        ipv4: 10.1.0.17/30
        node: D
      type: p2p
    isis:
      af:
        ipv4: true
      area: '49.0001'
      type: level-2
    loopback:
      ipv4: 10.0.0.5/32
    mgmt:
      ifname: Management0
      ipv4: 192.168.121.105
      mac: 08-4F-A9-00-00-05
    module:
    - isis
    name: E
ospf:
  area: 0.0.0.0
provider: clab
